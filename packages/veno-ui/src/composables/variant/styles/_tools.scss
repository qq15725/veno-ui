@use 'sass:map';
@use 'sass:string';
@use 'variables';
@use '../../../styles/tools/functions' as tools;
@use '../../../styles/tools/elevation' as *;

@mixin use-variant($props: ()) {
  $root: string.insert(string.slice(#{&}, 2), '.', 0);
  $props: tools.map-deep-merge(variables.$variant-props, $props);

  @if map.get($props, 'use-variant') {
    $variants: map.get($props, 'variants');

    &--variant-plain,
    &--variant-outlined,
    &--variant-text {
      background: transparent;
      color: tools.map-deep-get($variants, 'text', 'color');
    }

    &--variant-contained {
      background: tools.map-deep-get($variants, 'contained', 'background');
      color: tools.map-deep-get($variants, 'contained', 'color');
      $elevation: tools.map-deep-get($variants, 'contained', 'elevation');
      @if ($elevation > 0) {
        @include elevation($elevation);
      }
    }

    &--variant-plain {
      opacity: tools.map-deep-get($variants, 'plain', 'opacity');

      #{$root}__overlay {
        display: none;
      }

      &:focus,
      &:hover {
        opacity: 1;
      }
    }

    &--variant-text {
      #{$root}__overlay {
        background: currentColor;
      }
    }

    &--variant-contained-text,
    &--variant-contained-outlined {
      background: rgb(var(--ve-theme-surface));
      color: tools.map-deep-get($variants, 'contained', 'color');

      #{$root}__underlay {
        background: currentColor;
        border-radius: inherit;
        bottom: 0;
        opacity: var(--ve-activated-opacity);
        pointer-events: none;
        position: absolute;
        right: 0;
        top: 0;
        left: 0;
        transition: opacity 0.2s ease-in-out;
      }
    }

    &--variant-outlined:not(#{&}--border),
    &--variant-contained-outlined:not(#{&}--border) {
      #{$root}__border {
        bottom: 0;
        border-color: currentColor;
        border-radius: inherit;
        border-style: inherit;
        border-width: thin;
        opacity: .26;
        pointer-events: none;
        position: absolute;
        right: 0;
        top: 0;
        left: 0;
      }
    }
  }
}