@mixin generate-utility($utility, $infix, $forceDir) {
  $values: map-get($utility, values);
  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $value in $values {
    $properties: map-get($utility, property);
    @if type-of($properties) == 'string' {
      // Multiple properties are possible, for example with vertical or horizontal margins or paddings
      $properties: append((), $properties)
    }

    // Property can be a map, where the key is a mixin to include
    @if type-of($properties) == 'map' {
      @each $dir in $properties {
        $mixin: nth($dir, 1);
        @if $mixin == 'ltr' {
          .ve-locale--is-ltr {
            @include generate-utility-body($utility, nth($dir, 2), $value, $infix);
          }
        } @else if $mixin == 'rtl' {
          .ve-locale--is-rtl {
            @include generate-utility-body($utility, nth($dir, 2), $value, $infix);
          }
        } @else {
          @error 'Only RTL and LTR are supported'
        }
      }
    } @else {
      @if $forceDir == 'ltr' {
        .ve-locale--is-ltr {
          @include generate-utility-body($utility, $properties, $value, $infix);
        }
      } @else if $forceDir == 'rtl' {
        .ve-locale--is-rtl {
          @include generate-utility-body($utility, $properties, $value, $infix);
        }
      } @else {
        @include generate-utility-body($utility, $properties, $value, $infix);
      }
    }
  }
}

@mixin generate-utility-body($utility, $properties, $value, $infix) {
  // 自定义 class
  $property-class: map-get($utility, class);
  $property-class: if($property-class, $property-class, nth($properties, 1));
  // Don't prefix if value key is null (eg. with shadow class)
  $property-class-modifier: if(nth($value, 1), "-" + nth($value, 1), "");

  $value: nth($value, 2);

  .#{$property-class + $infix + $property-class-modifier} {
    @for $i from 1 through length($properties) {
      $property: nth($properties, $i);
      $val: $value;
      @if type-of($value) == 'list' and length($properties) == length($value) {
        $val: nth($value, $i);
      }
      @if $val != false {
        // Check if unimportant property exists.
        // This allows you to conditional skip
        // defining a property as important.
        $unimportant: map-get($utility, unimportant);
        #{$property}: $val if(index($unimportant, $property), null, !important);
      }
    }
  }
}